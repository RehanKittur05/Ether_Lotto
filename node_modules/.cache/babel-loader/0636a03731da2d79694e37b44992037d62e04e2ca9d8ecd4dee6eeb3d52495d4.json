{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rehan\\\\Downloads\\\\Lotto\\\\Lotto\\\\src\\\\PickWinner.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport constants from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PickWinner() {\n  _s();\n  const [owner, setOwner] = useState('');\n  const [contractInstance, setcontractInstance] = useState('');\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [isOwnerConnected, setisOwnerConnected] = useState(false);\n  const [winner, setWinner] = useState('');\n  const [status, setStatus] = useState(false);\n  useEffect(() => {\n    const loadBlockchainData = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        try {\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          console.log(address);\n          setCurrentAccount(address);\n          window.ethereum.on('accountsChanged', accounts => {\n            setCurrentAccount(accounts[0]);\n            console.log(currentAccount);\n          });\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        alert('Please install Metamask to use this application');\n      }\n    };\n    const contract = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contractIns = new ethers.Contract(constants.contractAddress, constants.contractAbi, signer);\n      setcontractInstance(contractIns);\n      const status = await contractInstance.isComplete();\n      setStatus(status);\n      const winner = await contractInstance.getWinner();\n      setWinner(winner);\n      const owner = await contractInstance.getManager();\n      setOwner(owner);\n      if (owner === currentAccount) {\n        setisOwnerConnected(true);\n      } else {\n        setisOwnerConnected(false);\n      }\n    };\n    loadBlockchainData();\n    contract();\n  }, [currentAccount]);\n  const pickWinner = async () => {\n    const tx = await contractInstance.pickWinner();\n    await tx.wait();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Result Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: status ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Lottery Winner is : \", winner]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }, this) : isOwnerConnected ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"enter-button\",\n        onClick: pickWinner,\n        children: \" Pick Winner \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 40\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are not the owner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(PickWinner, \"lQIc7z1OOOV+yd9LxRy7oZDcDNg=\");\n_c = PickWinner;\nexport default PickWinner;\nvar _c;\n$RefreshReg$(_c, \"PickWinner\");","map":{"version":3,"names":["React","useState","useEffect","ethers","constants","jsxDEV","_jsxDEV","PickWinner","_s","owner","setOwner","contractInstance","setcontractInstance","currentAccount","setCurrentAccount","isOwnerConnected","setisOwnerConnected","winner","setWinner","status","setStatus","loadBlockchainData","window","ethereum","provider","providers","Web3Provider","signer","getSigner","address","getAddress","console","log","on","accounts","err","error","alert","contract","contractIns","Contract","contractAddress","contractAbi","isComplete","getWinner","getManager","pickWinner","tx","wait","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rehan/Downloads/Lotto/Lotto/src/PickWinner.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {ethers} from 'ethers';\nimport constants from './constants';\n\n\nfunction PickWinner() {\n    const [owner, setOwner] = useState('');\n    const [contractInstance, setcontractInstance] = useState('');\n    const [currentAccount, setCurrentAccount] = useState('');\n    const [isOwnerConnected, setisOwnerConnected] = useState(false);\n    const [winner, setWinner] = useState('');\n    const [status, setStatus] = useState(false);\n\n    useEffect(() => {\n        const loadBlockchainData = async () => {\n            if (typeof window.ethereum !== 'undefined') {\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                try {\n                    const signer = provider.getSigner();\n                    const address = await signer.getAddress();\n                    console.log(address);\n                    setCurrentAccount(address);\n                    window.ethereum.on('accountsChanged', (accounts) => {\n                        setCurrentAccount(accounts[0]);\n                        console.log(currentAccount);\n                    })\n                } catch (err) {\n                    console.error(err);\n                }\n            } else {\n                alert('Please install Metamask to use this application')\n\n            }\n        };\n\n        const contract = async () => {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            const contractIns = new ethers.Contract(constants.contractAddress, constants.contractAbi, signer);\n            setcontractInstance(contractIns);\n            const status = await contractInstance.isComplete();\n            setStatus(status);\n            const winner = await contractInstance.getWinner();\n            setWinner(winner);\n            const owner = await contractInstance.getManager();\n            setOwner(owner);\n            if (owner === currentAccount) {\n                setisOwnerConnected(true);\n            }\n            else {\n                setisOwnerConnected(false);\n            }\n        }\n\n        loadBlockchainData();\n        contract();\n    }, [currentAccount]);\n\n\n    const pickWinner = async () => {\n        const tx = await contractInstance.pickWinner();\n        await tx.wait();\n    }\n\n    return (\n        <div className='container'>\n            <h1>Result Page</h1>\n            <div className='button-container'>\n                 {status ? (<p>Lottery Winner is : {winner}</p>) : \n                 ( isOwnerConnected ? (<button className=\"enter-button\" onClick={pickWinner}> Pick Winner </button>) : \n                 (<p>You are not the owner</p>))\n\n                 }\n            </div>\n        </div>\n    )\n\n}\n\nexport default PickWinner;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}