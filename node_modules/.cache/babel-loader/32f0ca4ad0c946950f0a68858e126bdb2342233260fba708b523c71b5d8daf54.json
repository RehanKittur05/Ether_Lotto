{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rehan\\\\Downloads\\\\Lotto\\\\Lotto\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport constants from \"./constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [contractInstance, setcontractInstance] = useState(\"\");\n  const [status, setStatus] = useState(false);\n  const [isWinner, setIsWinner] = useState(\"\");\n  useEffect(() => {\n    const loadBlockchainData = async () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        try {\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          console.log(address);\n          setCurrentAccount(address);\n          window.ethereum.on(\"accountsChanged\", accounts => {\n            setCurrentAccount(accounts[0]);\n            console.log(currentAccount);\n          });\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        alert(\"Please install Metamask to use this application\");\n      }\n    };\n    const contract = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contractIns = new ethers.Contract(constants.contractAddress, constants.contractAbi, signer);\n      setcontractInstance(contractIns);\n      const status = await contractInstance.isComplete();\n      setStatus(status);\n      const winner = await contractInstance.getWinner();\n      if (winner == currentAccount) {\n        setIsWinner(true);\n      } else {\n        setIsWinner(false);\n      }\n    };\n    loadBlockchainData();\n    contract();\n  }, [currentAccount]);\n  const enterLottery = async () => {\n    const amountToSend = ethers.utils.parseEther(\"0.001\");\n    const tx = await contractInstance.enter({\n      value: amountToSend\n    });\n    await tx.wait();\n  };\n  const claimPrize = async () => {\n    const tx = await contractInstance.claimPrize();\n    await tx.wait();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lottery Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: status ? isWinner ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"enter-button\",\n        onClick: claimPrize,\n        children: [\" \", \"Claim Prize\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are not the winner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"enter-button\",\n        onClick: enterLottery,\n        children: [\" \", \"Enter Lottery\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"Cd73LRMpBUinL9FJU4uwhVAQlp8=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","ethers","constants","jsxDEV","_jsxDEV","Home","_s","currentAccount","setCurrentAccount","contractInstance","setcontractInstance","status","setStatus","isWinner","setIsWinner","loadBlockchainData","window","ethereum","provider","providers","Web3Provider","signer","getSigner","address","getAddress","console","log","on","accounts","err","error","alert","contract","contractIns","Contract","contractAddress","contractAbi","isComplete","winner","getWinner","enterLottery","amountToSend","utils","parseEther","tx","enter","value","wait","claimPrize","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rehan/Downloads/Lotto/Lotto/src/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport constants from \"./constants\";\n\nfunction Home() {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [contractInstance, setcontractInstance] = useState(\"\");\n  const [status, setStatus] = useState(false);\n  const [isWinner, setIsWinner] = useState(\"\");\n\n  useEffect(() => {\n    const loadBlockchainData = async () => {\n      if (typeof window.ethereum !== \"undefined\") {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        try {\n          const signer = provider.getSigner();\n          const address = await signer.getAddress();\n          console.log(address);\n          setCurrentAccount(address);\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            setCurrentAccount(accounts[0]);\n            console.log(currentAccount);\n          });\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        alert(\"Please install Metamask to use this application\");\n      }\n    };\n\n    const contract = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contractIns = new ethers.Contract(\n        constants.contractAddress,\n        constants.contractAbi,\n        signer\n      );\n      setcontractInstance(contractIns);\n      const status = await contractInstance.isComplete();\n      setStatus(status);\n      const winner = await contractInstance.getWinner();\n      if (winner == currentAccount) {\n        setIsWinner(true);\n      } else {\n        setIsWinner(false);\n      }\n    };\n\n    loadBlockchainData();\n    contract();\n  }, [currentAccount]);\n\n  const enterLottery = async () => {\n    const amountToSend = ethers.utils.parseEther(\"0.001\");\n    const tx = await contractInstance.enter({ value: amountToSend });\n    await tx.wait();\n  };\n\n  const claimPrize = async () => {\n    const tx = await contractInstance.claimPrize();\n    await tx.wait();\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Lottery Page</h1>\n      <div className=\"button-container\">\n        {status ? (\n          isWinner ? (\n            <button className=\"enter-button\" onClick={claimPrize}>\n              {\" \"}\n              Claim Prize{\" \"}\n            </button>\n          ) : (\n            <p>You are not the winner</p>\n          )\n        ) : (\n          <button className=\"enter-button\" onClick={enterLottery}>\n            {\" \"}\n            Enter Lottery{\" \"}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}